diff --git a/config.py b/config.py
index 5f19bb7..ebf698a 100644
--- a/config.py
+++ b/config.py
@@ -17,11 +17,6 @@ debug = False
 # Defines if our saveddata will be in pyfa root or not
 saveInRoot = False
 
-if debug:
-    logLevel = logging.DEBUG
-else:
-    logLevel = logging.WARN
-
 # Version data
 version = "1.14.0"
 tag = "Stable"
@@ -50,23 +45,41 @@ class StreamToLogger(object):
       for line in buf.rstrip().splitlines():
          self.logger.log(self.log_level, line.rstrip())
 
+def isFrozen():
+    if hasattr(sys, 'frozen'):
+        return True
+    else:
+        return False
+
+def getPyfaRoot():
+    base = sys.executable if isFrozen() else sys.argv[0]
+    root = os.path.dirname(os.path.realpath(os.path.abspath(base)))
+    root = unicode(root, sys.getfilesystemencoding())
+    return root
+
 def __createDirs(path):
     if not os.path.exists(path):
         os.makedirs(path)
 
 def defPaths():
+    global debug
     global pyfaPath
     global savePath
     global staticPath
     global saveDB
     global gameDB
     global saveInRoot
+
+    if debug:
+        logLevel = logging.DEBUG
+    else:
+        logLevel = logging.WARN
+
     # The main pyfa directory which contains run.py
     # Python 2.X uses ANSI by default, so we need to convert the character encoding
     pyfaPath = getattr(configforced, "pyfaPath", pyfaPath)
     if pyfaPath is None:
-        pyfaPath = unicode(os.path.dirname(os.path.realpath(os.path.abspath(
-            sys.modules['__main__'].__file__))), sys.getfilesystemencoding())
+        pyfaPath = getPyfaRoot()
 
     # Where we store the saved fits etc, default is the current users home directory
     if saveInRoot is True:
@@ -95,9 +108,11 @@ def defPaths():
         sl = StreamToLogger(stdout_logger, logging.INFO)
         sys.stdout = sl
 
-        stderr_logger = logging.getLogger('STDERR')
-        sl = StreamToLogger(stderr_logger, logging.ERROR)
-        sys.stderr = sl
+        # This interferes with cx_Freeze's own handling of exceptions. Find a way to fix this.
+        #stderr_logger = logging.getLogger('STDERR')
+        #sl = StreamToLogger(stderr_logger, logging.ERROR)
+        #sys.stderr = sl
+
 
     # Static EVE Data from the staticdata repository, should be in the staticdata
     # directory in our pyfa directory
diff --git a/eos/db/migration.py b/eos/db/migration.py
index b04df38..dcf8636 100644
--- a/eos/db/migration.py
+++ b/eos/db/migration.py
@@ -3,17 +3,7 @@ import shutil
 import time
 import re
 import os
-
-def getAppVersion():
-    # calculate app version based on upgrade files we have
-    appVersion = 0
-    for fname in os.listdir(os.path.join(os.path.dirname(__file__), "migrations")):
-        m = re.match("^upgrade(?P<index>\d+)\.py$", fname)
-        if not m:
-            continue
-        index = int(m.group("index"))
-        appVersion = max(appVersion, index)
-    return appVersion
+import migrations
 
 def getVersion(db):
     cursor = db.execute('PRAGMA user_version')
@@ -21,7 +11,7 @@ def getVersion(db):
 
 def update(saveddata_engine):
     dbVersion = getVersion(saveddata_engine)
-    appVersion = getAppVersion()
+    appVersion = migrations.appVersion
 
     if dbVersion == appVersion:
         return
@@ -37,10 +27,11 @@ def update(saveddata_engine):
         shutil.copyfile(config.saveDB, toFile)
 
         for version in xrange(dbVersion, appVersion):
-            module = __import__("eos.db.migrations.upgrade{}".format(version + 1), fromlist=True)
-            upgrade = getattr(module, "upgrade", False)
-            if upgrade:
-                upgrade(saveddata_engine)
+
+            func = migrations.updates[version+1]
+            if func:
+                print "applying update",version+1
+                func(saveddata_engine)
 
         # when all is said and done, set version to current
         saveddata_engine.execute("PRAGMA user_version = {}".format(appVersion))
diff --git a/eos/db/migrations/__init__.py b/eos/db/migrations/__init__.py
index 16c9398..87988fb 100644
--- a/eos/db/migrations/__init__.py
+++ b/eos/db/migrations/__init__.py
@@ -7,3 +7,25 @@ define an upgrade() function with the logic. Please note that there must be as
 many upgrade files as there are database versions (version 5 would include
 upgrade files 1-5)
 """
+
+import pkgutil
+import re
+
+
+updates = {}
+appVersion = 0
+
+prefix = __name__ + "."
+for importer, modname, ispkg in pkgutil.iter_modules(__path__, prefix):
+    # loop through python files, extracting update number and function, and
+    # adding it to a list
+    modname_tail = modname.rsplit('.', 1)[-1]
+    module = __import__(modname, fromlist=True)
+    m = re.match("^upgrade(?P<index>\d+)$", modname_tail)
+    if not m:
+        continue
+    index = int(m.group("index"))
+    appVersion = max(appVersion, index)
+    upgrade = getattr(module, "upgrade", False)
+    if upgrade:
+        updates[index] = upgrade
diff --git a/gui/PFSearchBox.py b/gui/PFSearchBox.py
index 262d957..c09d7b9 100644
--- a/gui/PFSearchBox.py
+++ b/gui/PFSearchBox.py
@@ -49,10 +49,6 @@ class PFSearchBox(wx.Window):
 
         self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)
         self.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)
-        self.Bind(wx.EVT_MOTION, self.OnMouseMove)
-
-        self.Bind(wx.EVT_ENTER_WINDOW, self.OnEnterLeaveWindow)
-        self.Bind(wx.EVT_LEAVE_WINDOW, self.OnEnterLeaveWindow)
 
 #        self.EditBox.ChangeValue(self.descriptiveText)
 
@@ -64,25 +60,26 @@ class PFSearchBox(wx.Window):
 
         self.SetMinSize(size)
 
-    def OnEnterLeaveWindow(self, event):
-        self.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))
-        self._hl = False
-
     def OnText(self, event):
         wx.PostEvent(self, TextTyped())
+        event.Skip()
 
     def OnTextEnter(self, event):
         wx.PostEvent(self, TextEnter())
+        event.Skip()
+
 
     def OnEditSetFocus(self, event):
 #        value = self.EditBox.GetValue()
 #        if value == self.descriptiveText:
 #            self.EditBox.ChangeValue("")
-        pass
+        event.Skip()
 
     def OnEditKillFocus(self, event):
         if self.EditBox.GetValue() == "":
             self.Clear()
+        event.Skip()
+
 
     def Clear(self):
         self.EditBox.Clear()
@@ -138,20 +135,6 @@ class PFSearchBox(wx.Window):
         btnsize.append( (cw,ch))
         return btnsize
 
-    def OnMouseMove(self, event):
-        btnpos = self.GetButtonsPos()
-        btnsize = self.GetButtonsSize()
-        for btn in xrange(2):
-            if self.HitTest(btnpos[btn], event.GetPosition(), btnsize[btn]):
-                if not self._hl:
-                    self.SetCursor(wx.StockCursor(wx.CURSOR_HAND))
-                    self._hl = True
-                break
-            else:
-                if self._hl:
-                    self.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))
-                    self._hl = False
-
     def OnLeftDown(self, event):
         btnpos = self.GetButtonsPos()
         btnsize = self.GetButtonsSize()
diff --git a/gui/builtinStatsViews/resistancesViewFull.py b/gui/builtinStatsViews/resistancesViewFull.py
index a354243..2b0d94b 100644
--- a/gui/builtinStatsViews/resistancesViewFull.py
+++ b/gui/builtinStatsViews/resistancesViewFull.py
@@ -74,12 +74,9 @@ class ResistancesViewFull(StatsView):
         # Display table
         col = 0
         row = 0
-        sizerResistances = wx.GridBagSizer(0, 0)
+        sizerResistances = wx.GridBagSizer()
         contentSizer.Add( sizerResistances, 0, wx.EXPAND , 0)
 
-        for i in xrange(6):
-            sizerResistances.AddGrowableCol(i + 1)
-
         # Add an empty label, then the rest.
         sizerResistances.Add(wx.StaticText(contentPanel, wx.ID_ANY), wx.GBPosition( row, col ), wx.GBSpan( 1, 1 ))
         col+=1
@@ -95,6 +92,8 @@ class ResistancesViewFull(StatsView):
 
         self.stEHPs.Bind(wx.EVT_BUTTON, self.toggleEHP)
 
+        for i in xrange(4):
+            sizerResistances.AddGrowableCol(i+1)
 
         sizerResistances.Add(self.stEHPs, wx.GBPosition( row, col ), wx.GBSpan( 1, 1 ), wx.ALIGN_CENTER)
         col=0
diff --git a/gui/builtinStatsViews/targetingMiscViewFull.py b/gui/builtinStatsViews/targetingMiscViewFull.py
index afb97fd..7142943 100644
--- a/gui/builtinStatsViews/targetingMiscViewFull.py
+++ b/gui/builtinStatsViews/targetingMiscViewFull.py
@@ -52,7 +52,7 @@ class TargetingMiscViewFull(StatsView):
         gridTargetingMisc.AddGrowableCol(2)
         # Targeting
 
-        gridTargeting = wx.FlexGridSizer(4, 2)
+        gridTargeting = wx.FlexGridSizer(5, 2)
         gridTargeting.AddGrowableCol(1)
 
         gridTargetingMisc.Add(gridTargeting, 0, wx.ALIGN_LEFT | wx.ALL, 5)
@@ -77,7 +77,7 @@ class TargetingMiscViewFull(StatsView):
 
         # Misc
         gridTargetingMisc.Add( wx.StaticLine( contentPanel, wx.ID_ANY, style = wx.VERTICAL),0, wx.EXPAND, 3 )
-        gridMisc = wx.FlexGridSizer(4, 2)
+        gridMisc = wx.FlexGridSizer(5, 2)
         gridMisc.AddGrowableCol(1)
         gridTargetingMisc.Add(gridMisc,0 , wx.ALIGN_LEFT | wx.ALL, 5)
 
diff --git a/gui/builtinViewColumns/ammoIcon.py b/gui/builtinViewColumns/ammoIcon.py
index 1dfddf7..19d5536 100644
--- a/gui/builtinViewColumns/ammoIcon.py
+++ b/gui/builtinViewColumns/ammoIcon.py
@@ -27,7 +27,7 @@ class AmmoIcon(ViewColumn):
     name = "Ammo Icon"
     def __init__(self, fittingView, params):
         ViewColumn.__init__(self, fittingView)
-        self.size = 16
+        self.size = 24
         self.maxsize = self.size
         self.mask = wx.LIST_MASK_IMAGE
         self.columnText = ""
diff --git a/gui/builtinViewColumns/baseIcon.py b/gui/builtinViewColumns/baseIcon.py
index 5f88227..975267f 100644
--- a/gui/builtinViewColumns/baseIcon.py
+++ b/gui/builtinViewColumns/baseIcon.py
@@ -8,7 +8,7 @@ class BaseIcon(ViewColumn):
     name = "Base Icon"
     def __init__(self, fittingView, params):
         ViewColumn.__init__(self, fittingView)
-        self.size = 16
+        self.size = 24
         self.maxsize = self.size
         self.mask = wx.LIST_MASK_IMAGE
         self.columnText = ""
diff --git a/gui/builtinViews/fittingView.py b/gui/builtinViews/fittingView.py
index 76c291c..efec589 100644
--- a/gui/builtinViews/fittingView.py
+++ b/gui/builtinViews/fittingView.py
@@ -57,7 +57,7 @@ class FitSpawner(gui.multiSwitch.TabSpawner):
             startup = getattr(event, "startup", False)  # see OpenFitsThread in gui.mainFrame
             mstate = wx.GetMouseState()
 
-            if mstate.CmdDown() or mstate.MiddleDown() or startup:
+            if mstate.CmdDown() or startup:
                 self.multiSwitch.AddPage()
 
             view = FittingView(self.multiSwitch)
@@ -521,7 +521,7 @@ class FittingView(d.Display):
             sFit = service.Fit.getInstance()
             fitID = self.mainFrame.getActiveFit()
             ctrl = wx.GetMouseState().CmdDown() or wx.GetMouseState().MiddleDown()
-            click = "ctrl" if ctrl is True else "right" if event.Button == 3 else "left"
+            click = "ctrl" if ctrl is True else "right" if event.GetButton() == 3 else "left"
             sFit.toggleModulesState(fitID, self.mods[self.GetItemData(row)], mods, click)
 
             # update state tooltip
diff --git a/gui/characterEditor.py b/gui/characterEditor.py
index f036313..55fa8d4 100644
--- a/gui/characterEditor.py
+++ b/gui/characterEditor.py
@@ -64,6 +64,7 @@ class CharacterEditor(wx.Frame):
                 self.skillTreeChoice.SetSelection(i)
 
         self.navSizer.Add(self.skillTreeChoice, 1, wx.ALL | wx.EXPAND, 5)
+        self.navSizer.Add(self.btnSave, 0, wx.ALIGN_CENTER)
 
         buttons = (("new", wx.ART_NEW),
                    ("rename", bitmapLoader.getBitmap("rename", "icons")),
@@ -204,10 +205,8 @@ class CharacterEditor(wx.Frame):
         self.characterRename.SetFocus()
         for btn in (self.btnNew, self.btnCopy, self.btnRename, self.btnDelete):
             btn.Hide()
-            self.navSizer.Remove(btn)
 
         self.btnSave.Show()
-        self.navSizer.Add(self.btnSave, 0, wx.ALIGN_CENTER)
         self.navSizer.Layout()
 
         sChar = service.Character.getInstance()
@@ -230,9 +229,7 @@ class CharacterEditor(wx.Frame):
         self.navSizer.Replace(self.characterRename, self.skillTreeChoice)
         for btn in (self.btnNew, self.btnCopy, self.btnRename, self.btnDelete):
             btn.Show()
-            self.navSizer.Add(btn, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 2)
 
-        self.navSizer.Remove(self.btnSave)
         self.btnSave.Hide()
         self.navSizer.Layout()
         selection = self.skillTreeChoice.GetCurrentSelection()
diff --git a/gui/chromeTabs.py b/gui/chromeTabs.py
index 3a0c7b1..8e4c07a 100644
--- a/gui/chromeTabs.py
+++ b/gui/chromeTabs.py
@@ -21,6 +21,7 @@ import wx
 import wx.lib.newevent
 import gui.utils.colorUtils as colorUtils
 import gui.utils.drawUtils as drawUtils
+import gui.utils.fonts as fonts
 from gui import bitmapLoader
 import gui.utils.fonts as fonts
 
@@ -277,7 +278,7 @@ class PFNotebook(wx.Panel):
         bx, by = self.GetBorders()
         ww -= bx * 4
         wh -= by * 4
-        self.activePage.SetSize((ww, wh))
+        self.activePage.SetSize((max(ww, -1), max(wh, -1)))
         self.activePage.SetPosition((0, 0))
 
         if not resizeOnly:
@@ -671,6 +672,8 @@ class PFTabsContainer(wx.Panel):
         """
 
         wx.Panel.__init__(self, parent, id, pos, size)
+        if wx.VERSION >= (3,0):
+            self.SetBackgroundStyle(wx.BG_STYLE_PAINT)
 
         self.tabs = []
         width, height = size
@@ -1073,13 +1076,12 @@ class PFTabsContainer(wx.Panel):
 
         selected = 0
 
-        if 'wxMac' in wx.PlatformInfo:
+        if 'wxMac' in wx.PlatformInfo and wx.VERSION < (3,0):
             color = wx.Colour(0, 0, 0)
             brush = wx.Brush(color)
 
             from Carbon.Appearance import kThemeBrushDialogBackgroundActive
             brush.MacSetTheme(kThemeBrushDialogBackgroundActive)
-
         else:
             color = wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE)
             brush = wx.Brush(color)
diff --git a/gui/mainFrame.py b/gui/mainFrame.py
index 83bff35..6f89df0 100644
--- a/gui/mainFrame.py
+++ b/gui/mainFrame.py
@@ -57,8 +57,6 @@ from gui.builtinViews import *
 
 from time import gmtime, strftime
 
-import locale
-locale.setlocale(locale.LC_ALL, '')
 
 #dummy panel(no paint no erasebk)
 class PFPanel(wx.Panel):
@@ -564,7 +562,7 @@ class MainFrame(wx.Frame):
         if (dlg.ShowModal() == wx.ID_OK):
             self.progressDialog = wx.ProgressDialog(
                             "Importing fits",
-                            " "*100, # set some arbitrary spacing to create wifth in window
+                            " "*100, # set some arbitrary spacing to create width in window
                             parent=self, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME)
             self.progressDialog.message = None
             sFit.importFitsThreaded(dlg.GetPaths(), self.fileImportCallback)
@@ -583,7 +581,12 @@ class MainFrame(wx.Frame):
 
         if info == -1:
             # Done processing
-            self.progressDialog.Hide()
+            # see GH issue #281 on why conditional is needed
+
+            if 'wxMSW' in wx.PlatformInfo:
+                self.progressDialog.Destroy()
+            else:
+                self.progressDialog.Hide()
             self._openAfterImport(fits)
         elif info != self.progressDialog.message and info is not None:
             # New message, overwrite cached message and update
@@ -623,13 +626,16 @@ class MainFrame(wx.Frame):
                               "Backing up %d fits to: %s"%(max, filePath),
                               maximum=max, parent=self,
                               style=wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME)
-
             sFit.backupFits(filePath, self.backupCallback)
             self.progressDialog.ShowModal()
 
     def backupCallback(self, info):
         if info == -1:
-            self.progressDialog.Hide()
+            # see GH issue #281 on why conditional is needed
+            if 'wxMSW' in wx.PlatformInfo:
+                self.progressDialog.Destroy()
+            else:
+                self.progressDialog.Hide()
         else:
             self.progressDialog.Update(info)
 
diff --git a/gui/patternEditor.py b/gui/patternEditor.py
index 8bcdde2..e0be215 100644
--- a/gui/patternEditor.py
+++ b/gui/patternEditor.py
@@ -58,10 +58,6 @@ class DmgPatternEditorDlg(wx.Dialog):
         self.namePicker.Bind(wx.EVT_TEXT_ENTER, self.processRename)
         self.namePicker.Hide()
 
-        self.btnSave = wx.Button(self, wx.ID_SAVE)
-        self.btnSave.Hide()
-        self.btnSave.Bind(wx.EVT_BUTTON, self.processRename)
-
         size = None
         headerSizer.Add(self.ccDmgPattern, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT|wx.LEFT, 3)
         buttons = (("new", wx.ART_NEW),
@@ -83,6 +79,10 @@ class DmgPatternEditorDlg(wx.Dialog):
                 btn.SetToolTipString("%s pattern" % name.capitalize())
                 headerSizer.Add(btn, 0, wx.ALIGN_CENTER_VERTICAL)
 
+        self.btnSave = wx.Button(self, wx.ID_SAVE)
+        self.btnSave.Hide()
+        self.btnSave.Bind(wx.EVT_BUTTON, self.processRename)
+        self.headerSizer.Add(self.btnSave, 0, wx.ALIGN_CENTER)
 
         mainSizer.Add(headerSizer, 0, wx.EXPAND | wx.ALL, 2)
 
@@ -276,9 +276,7 @@ class DmgPatternEditorDlg(wx.Dialog):
 
         for btn in (self.new, self.rename, self.delete, self.copy):
             btn.Hide()
-            self.headerSizer.Remove(btn)
 
-        self.headerSizer.Add(self.btnSave, 0, wx.ALIGN_CENTER)
         self.btnSave.Show()
         self.headerSizer.Layout()
         if event is not None:
@@ -311,9 +309,7 @@ class DmgPatternEditorDlg(wx.Dialog):
         self.ccDmgPattern.Show()
         self.namePicker.Hide()
         self.btnSave.Hide()
-        self.headerSizer.Remove(self.btnSave)
         for btn in (self.new, self.rename, self.delete, self.copy):
-            self.headerSizer.Add(btn, 0, wx.ALIGN_CENTER_VERTICAL)
             btn.Show()
 
         sel = self.ccDmgPattern.GetSelection()
diff --git a/gui/preferenceDialog.py b/gui/preferenceDialog.py
index c3a1f9f..4061f27 100644
--- a/gui/preferenceDialog.py
+++ b/gui/preferenceDialog.py
@@ -33,8 +33,8 @@ class PreferenceDialog(wx.Dialog):
         self.listbook = wx.Listbook(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.LB_DEFAULT)
 
         self.listview = self.listbook.GetListView()
-        self.listview.SetMinSize((500, -1))
-        self.listview.SetSize((500, -1))
+        #self.listview.SetMinSize((500, -1))
+        #self.listview.SetSize((500, -1))
 
         self.imageList = wx.ImageList(32,32)
         self.listbook.SetImageList(self.imageList)
@@ -77,4 +77,4 @@ class PreferenceDialog(wx.Dialog):
         self.btnOK.Bind(wx.EVT_BUTTON, self.OnBtnOK)
 
     def OnBtnOK(self, event):
-        self.Destroy()
\ No newline at end of file
+        self.Destroy()
diff --git a/gui/pyfatogglepanel.py b/gui/pyfatogglepanel.py
index ce92f10..7cf088b 100644
--- a/gui/pyfatogglepanel.py
+++ b/gui/pyfatogglepanel.py
@@ -146,7 +146,6 @@ class TogglePanel ( wx.Panel ):
         else:
             return True
 
-
     def IsExpanded(self):
         """ Returns ``True`` if the pane window is currently shown. """
         if self._toggle == 1:
@@ -154,7 +153,6 @@ class TogglePanel ( wx.Panel ):
         else:
             return True
 
-
     def OnStateChange(self, sz):
         """
         Handles the status changes (collapsing/expanding).
@@ -168,9 +166,8 @@ class TogglePanel ( wx.Panel ):
 
         self.parent.GetSizer().SetSizeHints(self.parent)
 
-
         if self.IsCollapsed():
-                # expanded . collapsed transition
+            # expanded . collapsed transition
             if self.parent.GetSizer():
                 # we have just set the size hints...
                 sz = self.parent.GetSizer().CalcMin()
@@ -178,39 +175,36 @@ class TogglePanel ( wx.Panel ):
                 # use SetClientSize() and not SetSize() otherwise the size for
                 # e.g. a wxFrame with a menubar wouldn't be correctly set
                 self.parent.SetClientSize(sz)
-
             else:
                 self.parent.Layout()
-
         else:
-
-                    # collapsed . expanded transition
-
-                    # force our parent to "fit", i.e. expand so that it can honour
-                    # our minimal size
+            # collapsed . expanded transition
+            # force our parent to "fit", i.e. expand so that it can honour
+            # our minimal size
             self.parent.Fit()
 
-
     # Toggle the content panel (hide/show)
-
-    def toggleContent( self, event ):
+    def toggleContent(self, event):
         self.Freeze()
+        print self.contentPanel.GetSize()
         if self._toggle == 1:
             self.contentMinSize = self.contentPanel.GetSize()
-            self.contentPanel.SetMinSize(wx.Size(self.contentMinSize[0],0))
-            self.headerBmp.SetBitmap( self.bmpCollapsed)
-
-
+            self.contentPanel.Hide()
+            self.headerBmp.SetBitmap(self.bmpCollapsed)
         else:
-            self.contentPanel.SetMinSize(self.contentMinSize)
-
-            self.headerBmp.SetBitmap( self.bmpExpanded)
-
-
-        self._toggle *=-1
+            self.contentPanel.Show()
+            self.headerBmp.SetBitmap(self.bmpExpanded)
 
+        self._toggle *= -1
+        self.Layout()
         self.Thaw()
+
         if self.forceLayout == -1:
-            self.OnStateChange(self.GetBestSize())
+            if wx.VERSION >= (3, 0):
+                x, y = self.GetBestSize()
+                y -= self.contentPanel.GetSize()[1]
+            else:
+                x, y = self.GetBestSize()
+            self.OnStateChange((x, y))
         else:
-            self.parent.Layout()
+            self.parent.Layout()
\ No newline at end of file
diff --git a/gui/pygauge.py b/gui/pygauge.py
index f06a789..308004a 100644
--- a/gui/pygauge.py
+++ b/gui/pygauge.py
@@ -312,47 +312,53 @@ class PyGauge(wx.PyWindow):
             r = copy.copy(rect)
             r.width = w
 
+            if r.width > 0:
+                # If we draw it with zero width, GTK throws errors. This way,
+                # only draw it if the gauge will actually show something.
+                # We stick other calculations in this block to avoid wasting
+                # time on them if not needed. See GH issue #282
+
+                pv = value
+                xv=1
+                transition = 0
 
-            pv = value
-            xv=1
-            transition = 0
+                if pv <= 100:
+                    xv = pv/100
+                    transition = 0
 
-            if pv <= 100:
-                xv = pv/100
-                transition = 0
+                elif pv <=101:
+                    xv = pv -100
+                    transition = 1
 
-            elif pv <=101:
-                xv = pv -100
-                transition = 1
+                elif pv <= 103:
+                    xv = (pv -101)/2
+                    transition = 2
 
-            elif pv <= 103:
-                xv = (pv -101)/2
-                transition = 2
+                elif pv <= 105:
+                    xv = (pv -103)/2
+                    transition = 3
 
-            elif pv <= 105:
-                xv = (pv -103)/2
-                transition = 3
+                else:
+                    pv = 106
+                    xv = pv -100
+                    transition = -1
 
-            else:
-                pv = 106
-                xv = pv -100
-                transition = -1
+                if transition != -1:
+                    colorS,colorE = self.transitionsColors[transition]
+                    color = colorUtils.CalculateTransitionColor(colorS, colorE, xv)
+                else:
+                    color = wx.Colour(191,48,48)
 
-            if transition != -1:
-                colorS,colorE = self.transitionsColors[transition]
-                color = colorUtils.CalculateTransitionColor(colorS, colorE, xv)
-            else:
-                color = wx.Colour(191,48,48)
+                if self.gradientEffect > 0:
+                    gcolor = colorUtils.BrightenColor(color,  float(self.gradientEffect) / 100)
+                    gMid = colorUtils.BrightenColor(color,  float(self.gradientEffect/2) / 100)
+                else:
+                    gcolor = colorUtils.DarkenColor(color,  float(-self.gradientEffect) / 100)
+                    gMid = colorUtils.DarkenColor(color,  float(-self.gradientEffect/2) / 100)
 
-            if self.gradientEffect > 0:
-                gcolor = colorUtils.BrightenColor(color,  float(self.gradientEffect) / 100)
-                gMid = colorUtils.BrightenColor(color,  float(self.gradientEffect/2) / 100)
-            else:
-                gcolor = colorUtils.DarkenColor(color,  float(-self.gradientEffect) / 100)
-                gMid = colorUtils.DarkenColor(color,  float(-self.gradientEffect/2) / 100)
+                gBmp = drawUtils.DrawGradientBar(r.width, r.height, gMid, color, gcolor)
+                dc.DrawBitmap(gBmp, r.left, r.top)
 
-            gBmp = drawUtils.DrawGradientBar(r.width, r.height, gMid, color, gcolor)
-            dc.DrawBitmap(gBmp,r.left, r.top)
         else:
             colour=self.GetBarColour()
             dc.SetBrush(wx.Brush(colour))
@@ -397,7 +403,6 @@ class PyGauge(wx.PyWindow):
             dc.SetTextForeground(wx.Colour(255,255,255))
             dc.DrawLabel(formatStr.format(value), rect, wx.ALIGN_CENTER)
 
-
     def OnTimer(self,event):
         """
         Handles the ``wx.EVT_TIMER`` event for L{PyfaGauge}.
diff --git a/gui/resistsEditor.py b/gui/resistsEditor.py
index 8dcfe4b..acebfb1 100644
--- a/gui/resistsEditor.py
+++ b/gui/resistsEditor.py
@@ -51,10 +51,6 @@ class ResistsEditorDlg(wx.Dialog):
         self.namePicker.Bind(wx.EVT_TEXT_ENTER, self.processRename)
         self.namePicker.Hide()
 
-        self.btnSave = wx.Button(self, wx.ID_SAVE)
-        self.btnSave.Hide()
-        self.btnSave.Bind(wx.EVT_BUTTON, self.processRename)
-
         size = None
         headerSizer.Add(self.ccResists, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT | wx.LEFT, 3)
 
@@ -77,6 +73,12 @@ class ResistsEditorDlg(wx.Dialog):
                 btn.SetToolTipString("%s resist profile" % name.capitalize())
                 headerSizer.Add(btn, 0, wx.ALIGN_CENTER_VERTICAL)
 
+
+        self.btnSave = wx.Button(self, wx.ID_SAVE)
+        self.btnSave.Hide()
+        self.btnSave.Bind(wx.EVT_BUTTON, self.processRename)
+        headerSizer.Add(self.btnSave, 0, wx.ALIGN_CENTER)
+
         mainSizer.Add(headerSizer, 0, wx.EXPAND | wx.ALL, 2)
 
         self.sl = wx.StaticLine(self)
@@ -110,6 +112,9 @@ class ResistsEditorDlg(wx.Dialog):
             resistEditSizer.Add(wx.StaticText( self, wx.ID_ANY, u"%", wx.DefaultPosition, wx.DefaultSize, 0 ), 0, wx.BOTTOM | wx.TOP | wx.ALIGN_CENTER_VERTICAL, 5)
             editObj.Bind(wx.EVT_TEXT, self.ValuesUpdated)
 
+        # Color we use to reset invalid value color
+        self.colorReset = wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOWTEXT)
+
         contentSizer.Add(resistEditSizer, 1, wx.EXPAND | wx.ALL, 5)
         self.slfooter = wx.StaticLine(self)
         contentSizer.Add(self.slfooter, 0, wx.EXPAND | wx.TOP, 5)
@@ -196,21 +201,21 @@ class ResistsEditorDlg(wx.Dialog):
 
                 # if everything checks out, set resist attribute
                 setattr(p, "%sAmount"%type, value/100)
+                editObj.SetForegroundColour(self.colorReset)
 
+            self.stNotice.SetLabel("")
             self.totSizer.Layout()
 
             if event is not None:
-                # If we get here, everything is normal. Reset color
-                event.EventObject.SetForegroundColour(wx.NullColor)
                 event.Skip()
 
             service.TargetResists.getInstance().saveChanges(p)
 
         except ValueError:
-            event.EventObject.SetForegroundColour(wx.RED)
+            editObj.SetForegroundColour(wx.RED)
             self.stNotice.SetLabel("Incorrect Formatting (decimals only)")
         except AssertionError:
-            event.EventObject.SetForegroundColour(wx.RED)
+            editObj.SetForegroundColour(wx.RED)
             self.stNotice.SetLabel("Incorrect Range (must be 0-100)")
         finally:  # Refresh for color changes to take effect immediately
             self.Refresh()
@@ -266,7 +271,7 @@ class ResistsEditorDlg(wx.Dialog):
         for type in self.DAMAGE_TYPES:
             editObj = getattr(self, "%sEdit"%type)
             editObj.ChangeValue("0.0")
-            editObj.SetForegroundColour(wx.NullColor)
+            editObj.SetForegroundColour(self.colorReset)
 
         self.Refresh()
         self.renamePattern()
@@ -349,8 +354,6 @@ class ResistsEditorDlg(wx.Dialog):
             self.namePicker.SetFocus()
             for btn in (self.new, self.rename, self.delete, self.copy):
                 btn.Hide()
-                self.headerSizer.Remove(btn)
-            self.headerSizer.Add(self.btnSave, 0, wx.ALIGN_CENTER)
             self.btnSave.Show()
             self.restrict()
             self.headerSizer.Layout()
@@ -359,12 +362,10 @@ class ResistsEditorDlg(wx.Dialog):
             self.ccResists.Show()
             self.namePicker.Hide()
             self.btnSave.Hide()
-            self.headerSizer.Remove(self.btnSave)
             for btn in (self.new, self.rename, self.delete, self.copy):
-                self.headerSizer.Add(btn, 0, wx.ALIGN_CENTER_VERTICAL)
                 btn.Show()
             self.unrestrict()
-            #self.headerSizer.Layout()
+            self.headerSizer.Layout()
 
 
     def __del__( self ):
diff --git a/gui/sfBrowserItem.py b/gui/sfBrowserItem.py
index 4067707..81294cb 100644
--- a/gui/sfBrowserItem.py
+++ b/gui/sfBrowserItem.py
@@ -325,7 +325,8 @@ class SFBrowserItem(wx.Window):
 
 
     def OnLeftDown(self, event):
-        self.CaptureMouse()
+        if not self.HasCapture():
+            self.CaptureMouse()
 
         btn = self.toolbar.MouseClick(event)
 
diff --git a/gui/shipBrowser.py b/gui/shipBrowser.py
index 5301c6f..c5d81c3 100644
--- a/gui/shipBrowser.py
+++ b/gui/shipBrowser.py
@@ -15,6 +15,7 @@ import gui.utils.animEffects as animEffects
 
 import gui.sfBrowserItem as SFItem
 from gui.contextMenu import ContextMenu
+import gui.utils.fonts as fonts
 
 import service
 import gui.utils.fonts as fonts
@@ -1340,7 +1341,7 @@ class ShipItem(SFItem.SFBrowserItem):
             editCtl.SetPosition((fnEditPosX,fnEditPosY))
 
 class PFBitmapFrame(wx.Frame):
-    def __init__ (self,parent, pos, bitmap):
+    def __init__ (self, parent, pos, bitmap):
         wx.Frame.__init__(self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = pos, size = wx.DefaultSize, style =
                                                                wx.NO_BORDER
                                                              | wx.FRAME_NO_TASKBAR
@@ -1708,7 +1709,8 @@ class FitItem(SFItem.SFBrowserItem):
         if self.dragging:
             if not self.dragged:
                 if self.dragMotionTrigger < 0:
-                    self.CaptureMouse()
+                    if not self.HasCapture():
+                        self.CaptureMouse()
                     self.dragWindow = PFBitmapFrame(self, pos, self.dragTLFBmp)
                     self.dragWindow.Show()
                     self.dragged = True
@@ -1808,7 +1810,7 @@ class FitItem(SFItem.SFBrowserItem):
             self.AdjustControlSizePos(self.tcFitName, self.textStartx, self.toolbarx - self.editWidth - self.padding)
 
         tdc = wx.MemoryDC()
-        self.dragTLFBmp = wx.EmptyBitmap((self.toolbarx if self.toolbarx < 200 else 200), rect.height)
+        self.dragTLFBmp = wx.EmptyBitmap((self.toolbarx if self.toolbarx < 200 else 200), rect.height, 24)
         tdc.SelectObject(self.dragTLFBmp)
         tdc.Blit(0, 0, (self.toolbarx if self.toolbarx < 200 else 200), rect.height, mdc, 0, 0, wx.COPY)
         tdc.SelectObject(wx.NullBitmap)
diff --git a/gui/utils/drawUtils.py b/gui/utils/drawUtils.py
index 77b260a..dabd051 100644
--- a/gui/utils/drawUtils.py
+++ b/gui/utils/drawUtils.py
@@ -33,9 +33,10 @@ def DrawFilledBitmap(width, height, color):
     return canvas
 
 def DrawGradientBar(width, height, gStart, gEnd, gMid = None, fillRatio = 4):
+    # we need to have dimensions to draw
+    assert width > 0 and height > 0
     canvas = wx.EmptyBitmap(width,height)
 
-
     mdc = wx.MemoryDC()
     mdc.SelectObject(canvas)
 
diff --git a/gui/utils/exportHtml.py b/gui/utils/exportHtml.py
index 726bec2..838bae3 100644
--- a/gui/utils/exportHtml.py
+++ b/gui/utils/exportHtml.py
@@ -136,7 +136,7 @@ class exportHtmlThread(threading.Thread):
         categoryList = list(sMkt.getShipRoot())
         categoryList.sort(key=lambda ship: ship.name)
 
-        count = 1
+        count = 0
 
         for group in categoryList:
             # init market group string to give ships something to attach to
diff --git a/gui/utils/fonts.py b/gui/utils/fonts.py
index 08f858f..eb2dd95 100644
--- a/gui/utils/fonts.py
+++ b/gui/utils/fonts.py
@@ -1,3 +1,8 @@
+'''
+Font file to handle the differences in font calculations between
+different wxPython versions
+'''
+
 import wx
 
 if 'wxMac' in wx.PlatformInfo:
diff --git a/pyfa.py b/pyfa.py
index 76b7ca3..8189918 100755
--- a/pyfa.py
+++ b/pyfa.py
@@ -20,6 +20,19 @@
 
 import sys
 import re
+import config
+
+
+from optparse import OptionParser
+
+# Parse command line options
+usage = "usage: %prog [--root]"
+parser = OptionParser(usage=usage)
+parser.add_option("-r", "--root", action="store_true", dest="rootsavedata", help="if you want pyfa to store its data in root folder, use this option", default=False)
+parser.add_option("-w", "--wx28", action="store_true", dest="force28", help="Force usage of wxPython 2.8", default=False)
+parser.add_option("-d", "--debug", action="store_true", dest="debug", help="Set logger to debug level.", default=False)
+
+(options, args) = parser.parse_args()
 
 if not hasattr(sys, 'frozen'):
 
@@ -30,18 +43,17 @@ if not hasattr(sys, 'frozen'):
     try:
         import wxversion
     except ImportError:
-        print("Cannot find wxPython\nYou can download wxPython (2.8) from http://www.wxpython.org/")
+        print("Cannot find wxPython\nYou can download wxPython (2.8+) from http://www.wxpython.org/")
         sys.exit(1)
+
     try:
-        wxversion.select('2.8')
-    except wxversion.VersionError:
-        try:
-            wxversion.ensureMinimal('2.8')
-        except wxversion.VersionError:
-            print("Installed wxPython version doesn't meet requirements.\nYou can download wxPython (2.8) from http://www.wxpython.org/")
-            sys.exit(1)
+        if options.force28 is True:
+            wxversion.select('2.8')
         else:
-            print("wxPython 2.8 not found; attempting to use newer version, expect errors")
+            wxversion.select('3.0')
+    except wxversion.VersionError:
+        print "Installed wxPython version doesn't meet requirements.\nYou can download wxPython 2.8 or 3.0 from http://www.wxpython.org/"
+        sys.exit(1)
 
     try:
         import sqlalchemy
@@ -63,21 +75,19 @@ if not hasattr(sys, 'frozen'):
         print("Cannot find sqlalchemy.\nYou can download sqlalchemy (0.6+) from http://www.sqlalchemy.org/")
         sys.exit(1)
 
-from optparse import OptionParser
 
 if __name__ == "__main__":
-    # Parse command line options
-    usage = "usage: %prog [--root]"
-    parser = OptionParser(usage=usage)
-    parser.add_option("-r", "--root", action="store_true", dest="rootsavedata", help="if you want pyfa to store its data in root folder, use this option", default=False)
-    (options, args) = parser.parse_args()
-
-    import config
     # Configure paths
     if options.rootsavedata is True:
         config.saveInRoot = True
+
+    config.debug = options.debug
     config.defPaths()
 
+    # Basic logging initialization
+    import logging
+    logging.basicConfig()
+
     # Import everything
     import wx
     import os
diff --git a/scripts/dist.py b/scripts/dist.py
index 8fe6322..45ed7e4 100755
--- a/scripts/dist.py
+++ b/scripts/dist.py
@@ -4,18 +4,26 @@ Script for generating distributables based on platform skeletons.
 
 User supplies path for pyfa code base, root skeleton directory, and where the
 builds go. The builds are automatically named depending on the pyfa config
-values of `version` and `tag`. If it's a Stable release, the naming convention is:
+values of `version` and `tag`. If it's a Stable release, the naming
+convention is:
+
     pyfa-pyfaversion-expansion-expversion-platform
-If it is not Stable (tag=git), we determine if the pyfa code base includes the
-git repo to use as an ID. If not, uses randomly generated 6-character ID. The
-unstable naming convention:
+
+If it is not Stable (tag=git), we determine if the pyfa code base includes
+the git repo to use as an ID. If not, uses randomly generated 6-character ID.
+The unstable naming convention:
+
     pyfa-YYYMMDD-id-platform
 
-dist.py can also build the Windows installer provided that it has a path to Inno
-Setup (and, for generating on non-Windows platforms, that WINE is installed).
-To build the EXE file, `win` must be included in the platforms to be built.
+dist.py can also build the Windows installer provided that it has a path to
+Inno Setup (and, for generating on non-Windows platforms, that WINE is
+installed). To build the EXE file, `win` must be included in the platforms to
+be built.
 """
 
+#@todo: ensure build directory can be written to
+# todo: default build and dist directories
+
 from optparse import OptionParser
 import os.path
 import shutil
@@ -25,6 +33,7 @@ import datetime
 import random
 import string
 import zipfile
+import errno
 from subprocess import call
 
 class FileStub():
@@ -34,6 +43,15 @@ class FileStub():
     def flush(self, *args):
         pass
 
+def copyanything(src, dst):
+    try:
+        shutil.copytree(src, dst, ignore=loginfo)
+    except: # python >2.5
+        try:
+            shutil.copy(src, dst)
+        except:
+            raise
+
 def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
     return ''.join(random.choice(chars) for x in range(size))
 
@@ -42,7 +60,7 @@ def zipdir(path, zip):
         for file in files:
             zip.write(os.path.join(root, file))
 
-skels = ['win', 'mac', 'src']
+skels = ['win', 'mac', 'src', 'win-wx3']
 iscc =  "C:\Program Files (x86)\Inno Setup 5\ISCC.exe" # inno script location via wine
 
 if __name__ == "__main__":
@@ -52,7 +70,6 @@ if __name__ == "__main__":
     parser.add_option("-b", "--base", dest="base", help="Location of cleaned read-only base directory")
     parser.add_option("-d", "--destination", dest="destination", help="Where to copy our distributable")
     parser.add_option("-p", "--platforms", dest="platforms", help="Comma-separated list of platforms to build", default="win,src,mac")
-    parser.add_option("-t", "--static", dest="static", help="Directory containing static files")
     parser.add_option("-q", "--quiet", dest="silent", action="store_true")
     parser.add_option("-w", "--winexe", dest="winexe", action="store_true", help="Build the Windows installer file (needs Inno Setup). Must include 'win' in platform options")
     parser.add_option("-z", "--zip", dest="zip", action="store_true", help="zip archive instead of tar")
@@ -69,80 +86,109 @@ if __name__ == "__main__":
 
     options.platforms = options.platforms.split(",")
 
-    sys.path.append(options.base)
-    import config as pyfaconfig
+    #sys.path.append(options.base)
+    #import config as pyfaconfig
 
     for skel in skels:
         if skel not in options.platforms:
             continue
 
         print "\n======== %s ========"%skel
-        infoDict = {}
+
+        info = {}
+        config = {}
         skeleton = os.path.expanduser(os.path.join(options.skeleton, skel))
-        info = execfile(os.path.join(skeleton, "info.py"), infoDict)
-        dirName = infoDict["arcname"]
+
+        execfile(os.path.join(options.base, "config.py"), config)
+        execfile(os.path.join(skeleton, "info.py"), info)
+
+        destination = os.path.expanduser(options.destination)
+        if not os.path.isdir(destination) or not os.access(destination, os.W_OK | os.X_OK):
+            print "Destination directory does not exist or is not writable: {}".format(destination)
+            sys.exit()
+
+        dirName = info["arcname"]
+
         nowdt = datetime.datetime.now()
         now = "%04d%02d%02d" % (nowdt.year, nowdt.month, nowdt.day)
+
         git = False
-        if pyfaconfig.tag.lower() == "git":
+        if config['tag'].lower() == "git":
             try: # if there is a git repo associated with base, use master commit
-                with open(os.path.join(options.base,".git","refs","heads","master"), 'r') as f:
+                with open(os.path.join(options.base, ".git", "refs", "heads", "master"), 'r') as f:
                     id = f.readline()[0:6]
                     git = True
             except: # else, use custom ID
                 id = id_generator()
-            fileName = "pyfa-%s-%s-%s" % (now, id, infoDict["os"])
+            fileName = "pyfa-{}-{}-{}".format(now, id, info["os"])
         else:
-            fileName = "pyfa-%s-%s-%s-%s" % (pyfaconfig.version, pyfaconfig.expansionName.lower(), pyfaconfig.expansionVersion, infoDict["os"])
-
-        archiveName = "%s.%s"%(fileName, "zip" if options.zip else "tar.bz2")
+            fileName = "pyfa-{}-{}-{}-{}".format(
+                config['version'],
+                config['expansionName'].lower(),
+                config['expansionVersion'],
+                info["os"]
+            )
+
+        archiveName = "{}.{}".format(fileName, "zip" if options.zip else "tar.bz2")
         dst = os.path.join(os.getcwd(), dirName) # tmp directory where files are copied
         tmpFile = os.path.join(os.getcwd(), archiveName)
-        config = os.path.join(skeleton, "config.py")
-        destination = os.path.expanduser(options.destination)
 
         i = 0
-        gitData = (".git", ".gitignore", ".gitmodules")
+        ignoreData = (".git", ".gitignore", ".gitmodules", "dist_assets", "build", "dist", "scripts", ".idea")
         def loginfo(path, names):
+            # Print out a "progress" and return directories / files to ignore
             global i
             i += 1
             if i % 10 == 0:
                 sys.stdout.write(".")
                 sys.stdout.flush()
-            return gitData
+            return ignoreData
 
         try:
             print "Copying skeleton to ", dst
             i = 0
             shutil.copytree(skeleton, dst, ignore=loginfo)
             print
-            base = os.path.join(dst, infoDict["base"])
-            print "Copying base to ", base
-
-            i = 0
-            for stuff in os.listdir(os.path.expanduser(options.base)):
-                currSource = os.path.join(os.path.expanduser(options.base), stuff)
-                currDest = os.path.join(base, stuff)
-                if stuff in gitData:
-                    continue
-                elif os.path.isdir(currSource):
-                    shutil.copytree(currSource, currDest, ignore=loginfo)
-                else:
-                    shutil.copy2(currSource, currDest)
-
-            print
+            if "win-wx3" not in skel:
+                # simply copying base into working build
+                base = os.path.join(dst, info["base"])
+                print "Copying base to ", base
+
+                i = 0
+                for stuff in os.listdir(os.path.expanduser(options.base)):
+                    currSource = os.path.join(os.path.expanduser(options.base), stuff)
+                    currDest = os.path.join(base, stuff)
+                    if stuff in ignoreData:
+                        continue
+                    elif os.path.isdir(currSource):
+                        shutil.copytree(currSource, currDest, ignore=loginfo)
+                    else:
+                        shutil.copy2(currSource, currDest)
+
+                print
+                print "Copying done, making archive: ", tmpFile
+            else:
+                # this should work, but it's barely been tested
+                base = os.path.join(dst, info["base"])
+                source = os.path.expanduser(options.base)
+                sys.path.append(source)
+                import setup
 
-            if os.path.exists(config):
-                print "Adding skeleton config file"
-                shutil.copy2(config, base)
+                libraryFile = os.path.join(base, "library.zip")
 
+                with zipfile.ZipFile(libraryFile, 'a') as library:
+                    # change cwd to source so that the zip append will work correctly
+                    oldcwd = os.getcwd()
+                    os.chdir(source)
+                    for dir in setup.packages:
+                        zipdir(dir, library)
+                    library.write('pyfa.py', 'pyfa__main__.py')
+                    library.write('config.py')
 
-            if options.static is not None and os.path.exists(os.path.expanduser(options.static)):
-                print "Copying static data to ", os.path.join(base, "staticdata")
-                static = os.path.expanduser(options.static)
-                shutil.copytree(static, os.path.join(base, "staticdata"), ignore=loginfo)
+                for dir in setup.include_files:
+                    copyanything(dir, os.path.join(base, dir))
 
-            print "Copying done, making archive: ", tmpFile
+                os.chdir(oldcwd)
 
             if options.zip:
                 archive = zipfile.ZipFile(tmpFile, 'w', compression=zipfile.ZIP_DEFLATED)
@@ -150,7 +196,7 @@ if __name__ == "__main__":
                 archive.close()
             else:
                 archive = tarfile.open(tmpFile, "w:bz2")
-                archive.add(dst, arcname=infoDict["arcname"])
+                archive.add(dst, arcname=info["arcname"])
                 archive.close()
 
             print "Moving archive to ", destination
@@ -159,20 +205,20 @@ if __name__ == "__main__":
             if "win" in skel and options.winexe:
                 print "Compiling EXE"
 
-                if pyfaconfig.tag.lower() == "git":
+                if config['tag'].lower() == "git":
                     if git:   # if git repo info available, use git commit
                         expansion = "git-%s"%(id)
                     else: # if there is no git repo, use timestamp
                         expansion = now
                 else: # if code is Stable, use expansion name
-                   expansion = "%s %s"%(pyfaconfig.expansionName, pyfaconfig.expansionVersion),
+                   expansion = "%s %s"%(config['expansionName'], config['expansionVersion']),
 
                 calllist = ["wine"] if 'win' not in sys.platform else []
 
                 call(calllist + [
                     iscc,
                     os.path.join(os.path.dirname(__file__), "pyfa-setup.iss"),
-                    "/dMyAppVersion=%s"%(pyfaconfig.version),
+                    "/dMyAppVersion=%s"%(config['version']),
                     "/dMyAppExpansion=%s"%(expansion),
                     "/dMyAppDir=%s"%dst,
                     "/dMyOutputDir=%s"%destination,
diff --git a/service/conversions/__init__.py b/service/conversions/__init__.py
index c452fb6..c9ee794 100644
--- a/service/conversions/__init__.py
+++ b/service/conversions/__init__.py
@@ -7,7 +7,7 @@ item's name. The name of the file is usually arbitrary unless it's used in logic
 elsewhere (in which case can be accessed with packs[name])
 """
 
-import os
+import pkgutil
 
 # init parent dict
 all = {}
@@ -15,10 +15,10 @@ all = {}
 # init container to store the separate conversion packs in case we need them
 packs = {}
 
-for filename in os.listdir(os.path.dirname(__file__)):
-    basename, extension = filename.rsplit('.', 1)
 
-    if extension == "py" and basename not in ("__init__",):
-        conversionPack = __import__("%s.%s"%(__name__, basename), fromlist=True)
-        all.update(conversionPack.CONVERSIONS)
-        packs[basename] = conversionPack.CONVERSIONS
+prefix = __name__ + "."
+for importer, modname, ispkg in pkgutil.iter_modules(__path__, prefix):
+    conversionPack = __import__(modname, fromlist="dummy")
+    all.update(conversionPack.CONVERSIONS)
+    modname_tail = modname.rsplit('.', 1)[-1]
+    packs[modname_tail] = conversionPack.CONVERSIONS
--- /dev/null
+++ b/setup.py
@@ -0,0 +1,80 @@
+"""
+Distribution builder for pyfa.
+
+Windows executable: python setup.py build
+Windows executable + installer: python setup.py bdist_msi
+"""
+
+packages = ['eos', 'gui', 'service', 'utils']
+include_files = ['icons', 'staticdata', 'gpl.txt']
+includes = []
+#  collection.abc due to bug:
+#  https://bitbucket.org/anthony_tuininga/cx_freeze/issues/127/collectionssys-error
+excludes = ['Tkinter', 'collections.abc']
+
+
+
+
+if __name__ == "__main__":
+    import sys
+    from cx_Freeze import setup, Executable
+    import config
+
+
+    app_name = 'pyfa'
+    app_version = '{}'.format(config.version)
+    app_description = 'Python fitting assistant'
+
+    # Windows-specific options
+    build_options_winexe = {
+        'packages': packages,
+        'include_files': include_files,
+        'includes': includes,
+        'excludes': excludes,
+        'compressed': True,
+        'optimize': 2,
+        'include_msvcr': True,
+    }
+
+    build_options_winmsi = {
+        'upgrade_code': '{E80885AC-31BA-4D9A-A04F-9E5915608A6C}',
+        'add_to_path': False,
+        'initial_target_dir': r'[ProgramFilesFolder]\{}'.format(app_name),
+    }
+
+
+    # Mac-specific options (untested)
+    build_options_macapp = {
+        'iconfile': 'dist_assets/mac/pyfa.icns',
+        'bundle_name': app_name,
+    }
+
+    build_options_macdmg = {
+        'volume_label': app_name,
+        'applications-shortcut': True,
+    }
+
+
+    # Generic executable options
+    executable_options = {
+        'script': 'pyfa.py',
+        # Following are windows-specific options, they are stored
+        # on a per-executable basis
+        'base': 'Win32GUI' if sys.platform=='win32' else None,
+        'icon': 'dist_assets/win/pyfa.ico',
+        'shortcutDir': 'DesktopFolder',
+        'shortcutName': app_name,
+    }
+
+    setup(
+        name=app_name,
+        version=app_version,
+        description=app_description,
+        options = {
+            'build_exe': build_options_winexe,
+            'bdist_msi': build_options_winmsi,
+            'bdist_mac': build_options_macapp,
+            'bdist_dmg': build_options_macdmg,
+        },
+        executables=[Executable(**executable_options)]
+    )
diff --git a/staticdata/README.txt b/staticdata/README.txt
deleted file mode 100644
index 81f4f77..0000000
--- a/staticdata/README.txt
+++ /dev/null
@@ -1,25 +0,0 @@
-Generating a new sqlite dump HOWTO
-
-You'll need pyfa itself (git://dev.evefit.org/pyfa.git)
-as well as phobos (git://dev.evefit.org/phobos.git)
-
-Phobos can dump the whole of the eve cache to json, after installing it (=python setup.py install) just do python dumpToJson.py -e /path/to/eve -c /path/to/eve/cache -s serverName -o /output/folder
-
-Arguments explained: -e and -c should be pretty self explanitory, they're the path to the eve install and the eve cache respectivly
-
--s is the serverName, its used to figure out which subfolder in the machonet folder we're intrested in. (possible values: tranquility, singularity, duality).
-This is passed directly to reverence which keeps a serverName to IP address mapping. You could probably add more servers with their IPs in the reverence sourcecode (cache.py file, around like 150 in the CacheMgr class) if you need another one.
-
--o is the output folder to dump all json files to, it should already exist or you'll get errors.
-
-
-
-After thats done, you'll have all json files you need, and you can use a script within pyfa to generate a dump from that.
-
-After you checked out pyfa, don't forget to update submodules (git submodule update --init).
-
-and then browse to eos/utils/scripts/jsonToSql.py, which can generate the sqlite dump pyfa needs.
-
-python jsonToSql.py -d eve.db -j /output/folder
-
-Once thats done, you should have a nice little sqlite database, you can replace the one in the staticdata folder with yours and it should run right away.
\ No newline at end of file
