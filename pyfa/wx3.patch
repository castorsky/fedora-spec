diff --git a/config.py b/config.py
index f1b8bcb..614aa90 100644
--- a/config.py
+++ b/config.py
@@ -32,6 +32,19 @@ staticPath = None
 saveDB = None
 gameDB = None
 
+def isFrozen():
+    if hasattr(sys, 'frozen'):
+        return True
+    else:
+        return False
+
+
+def getPyfaRoot():
+    base = sys.executable if isFrozen() else sys.argv[0]
+    root = os.path.dirname(os.path.realpath(os.path.abspath(base)))
+    root = unicode(root, sys.getfilesystemencoding())
+    return root
+
 def __createDirs(path):
     if not os.path.exists(path):
         os.makedirs(path)
@@ -47,8 +60,7 @@ def defPaths():
     # Python 2.X uses ANSI by default, so we need to convert the character encoding
     pyfaPath = getattr(configforced, "pyfaPath", pyfaPath)
     if pyfaPath is None:
-        pyfaPath = unicode(os.path.dirname(os.path.realpath(os.path.abspath(
-            sys.modules['__main__'].__file__))), sys.getfilesystemencoding())
+        pyfaPath = getPyfaRoot()
 
     # Where we store the saved fits etc, default is the current users home directory
     if saveInRoot is True:
@@ -74,11 +86,15 @@ def defPaths():
 
     # Redirect stderr to file if we're requested to do so
     stderrToFile = getattr(configforced, "stderrToFile", None)
+    if stderrToFile is None:
+        stderrToFile = True if isFrozen() else False
     if stderrToFile is True:
         sys.stderr = open(os.path.join(savePath, "error_log.txt"), "w")
 
     # Same for stdout
     stdoutToFile = getattr(configforced, "stdoutToFile", None)
+    if stdoutToFile is None:
+        stdoutToFile = True if isFrozen() else False
     if stdoutToFile is True:
         sys.stdout = open(os.path.join(savePath, "output_log.txt"), "w")
 
diff --git a/gui/PFSearchBox.py b/gui/PFSearchBox.py
index 262d957..c09d7b9 100644
--- a/gui/PFSearchBox.py
+++ b/gui/PFSearchBox.py
@@ -49,10 +49,6 @@ class PFSearchBox(wx.Window):
 
         self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)
         self.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)
-        self.Bind(wx.EVT_MOTION, self.OnMouseMove)
-
-        self.Bind(wx.EVT_ENTER_WINDOW, self.OnEnterLeaveWindow)
-        self.Bind(wx.EVT_LEAVE_WINDOW, self.OnEnterLeaveWindow)
 
 #        self.EditBox.ChangeValue(self.descriptiveText)
 
@@ -64,25 +60,26 @@ class PFSearchBox(wx.Window):
 
         self.SetMinSize(size)
 
-    def OnEnterLeaveWindow(self, event):
-        self.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))
-        self._hl = False
-
     def OnText(self, event):
         wx.PostEvent(self, TextTyped())
+        event.Skip()
 
     def OnTextEnter(self, event):
         wx.PostEvent(self, TextEnter())
+        event.Skip()
+
 
     def OnEditSetFocus(self, event):
 #        value = self.EditBox.GetValue()
 #        if value == self.descriptiveText:
 #            self.EditBox.ChangeValue("")
-        pass
+        event.Skip()
 
     def OnEditKillFocus(self, event):
         if self.EditBox.GetValue() == "":
             self.Clear()
+        event.Skip()
+
 
     def Clear(self):
         self.EditBox.Clear()
@@ -138,20 +135,6 @@ class PFSearchBox(wx.Window):
         btnsize.append( (cw,ch))
         return btnsize
 
-    def OnMouseMove(self, event):
-        btnpos = self.GetButtonsPos()
-        btnsize = self.GetButtonsSize()
-        for btn in xrange(2):
-            if self.HitTest(btnpos[btn], event.GetPosition(), btnsize[btn]):
-                if not self._hl:
-                    self.SetCursor(wx.StockCursor(wx.CURSOR_HAND))
-                    self._hl = True
-                break
-            else:
-                if self._hl:
-                    self.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))
-                    self._hl = False
-
     def OnLeftDown(self, event):
         btnpos = self.GetButtonsPos()
         btnsize = self.GetButtonsSize()
diff --git a/gui/builtinStatsViews/resistancesViewFull.py b/gui/builtinStatsViews/resistancesViewFull.py
index a354243..2b0d94b 100644
--- a/gui/builtinStatsViews/resistancesViewFull.py
+++ b/gui/builtinStatsViews/resistancesViewFull.py
@@ -74,12 +74,9 @@ class ResistancesViewFull(StatsView):
         # Display table
         col = 0
         row = 0
-        sizerResistances = wx.GridBagSizer(0, 0)
+        sizerResistances = wx.GridBagSizer()
         contentSizer.Add( sizerResistances, 0, wx.EXPAND , 0)
 
-        for i in xrange(6):
-            sizerResistances.AddGrowableCol(i + 1)
-
         # Add an empty label, then the rest.
         sizerResistances.Add(wx.StaticText(contentPanel, wx.ID_ANY), wx.GBPosition( row, col ), wx.GBSpan( 1, 1 ))
         col+=1
@@ -95,6 +92,8 @@ class ResistancesViewFull(StatsView):
 
         self.stEHPs.Bind(wx.EVT_BUTTON, self.toggleEHP)
 
+        for i in xrange(4):
+            sizerResistances.AddGrowableCol(i+1)
 
         sizerResistances.Add(self.stEHPs, wx.GBPosition( row, col ), wx.GBSpan( 1, 1 ), wx.ALIGN_CENTER)
         col=0
diff --git a/gui/builtinStatsViews/targetingMiscViewFull.py b/gui/builtinStatsViews/targetingMiscViewFull.py
index fc26733..ac0fc79 100644
--- a/gui/builtinStatsViews/targetingMiscViewFull.py
+++ b/gui/builtinStatsViews/targetingMiscViewFull.py
@@ -52,7 +52,7 @@ class TargetingMiscViewFull(StatsView):
         gridTargetingMisc.AddGrowableCol(2)
         # Targeting
 
-        gridTargeting = wx.FlexGridSizer(4, 2)
+        gridTargeting = wx.FlexGridSizer(5, 2)
         gridTargeting.AddGrowableCol(1)
 
         gridTargetingMisc.Add(gridTargeting, 0, wx.ALIGN_LEFT | wx.ALL, 5)
@@ -77,7 +77,7 @@ class TargetingMiscViewFull(StatsView):
 
         # Misc
         gridTargetingMisc.Add( wx.StaticLine( contentPanel, wx.ID_ANY, style = wx.VERTICAL),0, wx.EXPAND, 3 )
-        gridMisc = wx.FlexGridSizer(4, 2)
+        gridMisc = wx.FlexGridSizer(5, 2)
         gridMisc.AddGrowableCol(1)
         gridTargetingMisc.Add(gridMisc,0 , wx.ALIGN_LEFT | wx.ALL, 5)
 
diff --git a/gui/builtinViewColumns/ammoIcon.py b/gui/builtinViewColumns/ammoIcon.py
index 1dfddf7..19d5536 100644
--- a/gui/builtinViewColumns/ammoIcon.py
+++ b/gui/builtinViewColumns/ammoIcon.py
@@ -27,7 +27,7 @@ class AmmoIcon(ViewColumn):
     name = "Ammo Icon"
     def __init__(self, fittingView, params):
         ViewColumn.__init__(self, fittingView)
-        self.size = 16
+        self.size = 24
         self.maxsize = self.size
         self.mask = wx.LIST_MASK_IMAGE
         self.columnText = ""
diff --git a/gui/builtinViewColumns/baseIcon.py b/gui/builtinViewColumns/baseIcon.py
index 5f88227..975267f 100644
--- a/gui/builtinViewColumns/baseIcon.py
+++ b/gui/builtinViewColumns/baseIcon.py
@@ -8,7 +8,7 @@ class BaseIcon(ViewColumn):
     name = "Base Icon"
     def __init__(self, fittingView, params):
         ViewColumn.__init__(self, fittingView)
-        self.size = 16
+        self.size = 24
         self.maxsize = self.size
         self.mask = wx.LIST_MASK_IMAGE
         self.columnText = ""
diff --git a/gui/builtinViews/fittingView.py b/gui/builtinViews/fittingView.py
index 76c291c..efec589 100644
--- a/gui/builtinViews/fittingView.py
+++ b/gui/builtinViews/fittingView.py
@@ -57,7 +57,7 @@ class FitSpawner(gui.multiSwitch.TabSpawner):
             startup = getattr(event, "startup", False)  # see OpenFitsThread in gui.mainFrame
             mstate = wx.GetMouseState()
 
-            if mstate.CmdDown() or mstate.MiddleDown() or startup:
+            if mstate.CmdDown() or startup:
                 self.multiSwitch.AddPage()
 
             view = FittingView(self.multiSwitch)
@@ -521,7 +521,7 @@ class FittingView(d.Display):
             sFit = service.Fit.getInstance()
             fitID = self.mainFrame.getActiveFit()
             ctrl = wx.GetMouseState().CmdDown() or wx.GetMouseState().MiddleDown()
-            click = "ctrl" if ctrl is True else "right" if event.Button == 3 else "left"
+            click = "ctrl" if ctrl is True else "right" if event.GetButton() == 3 else "left"
             sFit.toggleModulesState(fitID, self.mods[self.GetItemData(row)], mods, click)
 
             # update state tooltip
diff --git a/gui/characterEditor.py b/gui/characterEditor.py
index f036313..55fa8d4 100644
--- a/gui/characterEditor.py
+++ b/gui/characterEditor.py
@@ -64,6 +64,7 @@ class CharacterEditor(wx.Frame):
                 self.skillTreeChoice.SetSelection(i)
 
         self.navSizer.Add(self.skillTreeChoice, 1, wx.ALL | wx.EXPAND, 5)
+        self.navSizer.Add(self.btnSave, 0, wx.ALIGN_CENTER)
 
         buttons = (("new", wx.ART_NEW),
                    ("rename", bitmapLoader.getBitmap("rename", "icons")),
@@ -204,10 +205,8 @@ class CharacterEditor(wx.Frame):
         self.characterRename.SetFocus()
         for btn in (self.btnNew, self.btnCopy, self.btnRename, self.btnDelete):
             btn.Hide()
-            self.navSizer.Remove(btn)
 
         self.btnSave.Show()
-        self.navSizer.Add(self.btnSave, 0, wx.ALIGN_CENTER)
         self.navSizer.Layout()
 
         sChar = service.Character.getInstance()
@@ -230,9 +229,7 @@ class CharacterEditor(wx.Frame):
         self.navSizer.Replace(self.characterRename, self.skillTreeChoice)
         for btn in (self.btnNew, self.btnCopy, self.btnRename, self.btnDelete):
             btn.Show()
-            self.navSizer.Add(btn, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 2)
 
-        self.navSizer.Remove(self.btnSave)
         self.btnSave.Hide()
         self.navSizer.Layout()
         selection = self.skillTreeChoice.GetCurrentSelection()
diff --git a/gui/chromeTabs.py b/gui/chromeTabs.py
index 3a0c7b1..e6b2482 100644
--- a/gui/chromeTabs.py
+++ b/gui/chromeTabs.py
@@ -21,6 +21,7 @@ import wx
 import wx.lib.newevent
 import gui.utils.colorUtils as colorUtils
 import gui.utils.drawUtils as drawUtils
+import gui.utils.fonts as fonts
 from gui import bitmapLoader
 import gui.utils.fonts as fonts
 
@@ -277,7 +278,7 @@ class PFNotebook(wx.Panel):
         bx, by = self.GetBorders()
         ww -= bx * 4
         wh -= by * 4
-        self.activePage.SetSize((ww, wh))
+        self.activePage.SetSize((max(ww, -1), max(wh, -1)))
         self.activePage.SetPosition((0, 0))
 
         if not resizeOnly:
@@ -671,6 +672,8 @@ class PFTabsContainer(wx.Panel):
         """
 
         wx.Panel.__init__(self, parent, id, pos, size)
+        if wx.VERSION >= (3,0):
+            self.SetBackgroundStyle(wx.BG_STYLE_PAINT)
 
         self.tabs = []
         width, height = size
diff --git a/gui/mainFrame.py b/gui/mainFrame.py
index 83bff35..6f89df0 100644
--- a/gui/mainFrame.py
+++ b/gui/mainFrame.py
@@ -57,8 +57,6 @@ from gui.builtinViews import *
 
 from time import gmtime, strftime
 
-import locale
-locale.setlocale(locale.LC_ALL, '')
 
 #dummy panel(no paint no erasebk)
 class PFPanel(wx.Panel):
@@ -564,7 +562,7 @@ class MainFrame(wx.Frame):
         if (dlg.ShowModal() == wx.ID_OK):
             self.progressDialog = wx.ProgressDialog(
                             "Importing fits",
-                            " "*100, # set some arbitrary spacing to create wifth in window
+                            " "*100, # set some arbitrary spacing to create width in window
                             parent=self, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME)
             self.progressDialog.message = None
             sFit.importFitsThreaded(dlg.GetPaths(), self.fileImportCallback)
@@ -583,7 +581,12 @@ class MainFrame(wx.Frame):
 
         if info == -1:
             # Done processing
-            self.progressDialog.Hide()
+            # see GH issue #281 on why conditional is needed
+
+            if 'wxMSW' in wx.PlatformInfo:
+                self.progressDialog.Destroy()
+            else:
+                self.progressDialog.Hide()
             self._openAfterImport(fits)
         elif info != self.progressDialog.message and info is not None:
             # New message, overwrite cached message and update
@@ -623,13 +626,16 @@ class MainFrame(wx.Frame):
                               "Backing up %d fits to: %s"%(max, filePath),
                               maximum=max, parent=self,
                               style=wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME)
-
             sFit.backupFits(filePath, self.backupCallback)
             self.progressDialog.ShowModal()
 
     def backupCallback(self, info):
         if info == -1:
-            self.progressDialog.Hide()
+            # see GH issue #281 on why conditional is needed
+            if 'wxMSW' in wx.PlatformInfo:
+                self.progressDialog.Destroy()
+            else:
+                self.progressDialog.Hide()
         else:
             self.progressDialog.Update(info)
 
diff --git a/gui/patternEditor.py b/gui/patternEditor.py
index 8bcdde2..e0be215 100644
--- a/gui/patternEditor.py
+++ b/gui/patternEditor.py
@@ -58,10 +58,6 @@ class DmgPatternEditorDlg(wx.Dialog):
         self.namePicker.Bind(wx.EVT_TEXT_ENTER, self.processRename)
         self.namePicker.Hide()
 
-        self.btnSave = wx.Button(self, wx.ID_SAVE)
-        self.btnSave.Hide()
-        self.btnSave.Bind(wx.EVT_BUTTON, self.processRename)
-
         size = None
         headerSizer.Add(self.ccDmgPattern, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT|wx.LEFT, 3)
         buttons = (("new", wx.ART_NEW),
@@ -83,6 +79,10 @@ class DmgPatternEditorDlg(wx.Dialog):
                 btn.SetToolTipString("%s pattern" % name.capitalize())
                 headerSizer.Add(btn, 0, wx.ALIGN_CENTER_VERTICAL)
 
+        self.btnSave = wx.Button(self, wx.ID_SAVE)
+        self.btnSave.Hide()
+        self.btnSave.Bind(wx.EVT_BUTTON, self.processRename)
+        self.headerSizer.Add(self.btnSave, 0, wx.ALIGN_CENTER)
 
         mainSizer.Add(headerSizer, 0, wx.EXPAND | wx.ALL, 2)
 
@@ -276,9 +276,7 @@ class DmgPatternEditorDlg(wx.Dialog):
 
         for btn in (self.new, self.rename, self.delete, self.copy):
             btn.Hide()
-            self.headerSizer.Remove(btn)
 
-        self.headerSizer.Add(self.btnSave, 0, wx.ALIGN_CENTER)
         self.btnSave.Show()
         self.headerSizer.Layout()
         if event is not None:
@@ -311,9 +309,7 @@ class DmgPatternEditorDlg(wx.Dialog):
         self.ccDmgPattern.Show()
         self.namePicker.Hide()
         self.btnSave.Hide()
-        self.headerSizer.Remove(self.btnSave)
         for btn in (self.new, self.rename, self.delete, self.copy):
-            self.headerSizer.Add(btn, 0, wx.ALIGN_CENTER_VERTICAL)
             btn.Show()
 
         sel = self.ccDmgPattern.GetSelection()
diff --git a/gui/preferenceDialog.py b/gui/preferenceDialog.py
index c3a1f9f..4061f27 100644
--- a/gui/preferenceDialog.py
+++ b/gui/preferenceDialog.py
@@ -33,8 +33,8 @@ class PreferenceDialog(wx.Dialog):
         self.listbook = wx.Listbook(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.LB_DEFAULT)
 
         self.listview = self.listbook.GetListView()
-        self.listview.SetMinSize((500, -1))
-        self.listview.SetSize((500, -1))
+        #self.listview.SetMinSize((500, -1))
+        #self.listview.SetSize((500, -1))
 
         self.imageList = wx.ImageList(32,32)
         self.listbook.SetImageList(self.imageList)
@@ -77,4 +77,4 @@ class PreferenceDialog(wx.Dialog):
         self.btnOK.Bind(wx.EVT_BUTTON, self.OnBtnOK)
 
     def OnBtnOK(self, event):
-        self.Destroy()
\ No newline at end of file
+        self.Destroy()
diff --git a/gui/pyfatogglepanel.py b/gui/pyfatogglepanel.py
index ce92f10..7cf088b 100644
--- a/gui/pyfatogglepanel.py
+++ b/gui/pyfatogglepanel.py
@@ -146,7 +146,6 @@ class TogglePanel ( wx.Panel ):
         else:
             return True
 
-
     def IsExpanded(self):
         """ Returns ``True`` if the pane window is currently shown. """
         if self._toggle == 1:
@@ -154,7 +153,6 @@ class TogglePanel ( wx.Panel ):
         else:
             return True
 
-
     def OnStateChange(self, sz):
         """
         Handles the status changes (collapsing/expanding).
@@ -168,9 +166,8 @@ class TogglePanel ( wx.Panel ):
 
         self.parent.GetSizer().SetSizeHints(self.parent)
 
-
         if self.IsCollapsed():
-                # expanded . collapsed transition
+            # expanded . collapsed transition
             if self.parent.GetSizer():
                 # we have just set the size hints...
                 sz = self.parent.GetSizer().CalcMin()
@@ -178,39 +175,36 @@ class TogglePanel ( wx.Panel ):
                 # use SetClientSize() and not SetSize() otherwise the size for
                 # e.g. a wxFrame with a menubar wouldn't be correctly set
                 self.parent.SetClientSize(sz)
-
             else:
                 self.parent.Layout()
-
         else:
-
-                    # collapsed . expanded transition
-
-                    # force our parent to "fit", i.e. expand so that it can honour
-                    # our minimal size
+            # collapsed . expanded transition
+            # force our parent to "fit", i.e. expand so that it can honour
+            # our minimal size
             self.parent.Fit()
 
-
     # Toggle the content panel (hide/show)
-
-    def toggleContent( self, event ):
+    def toggleContent(self, event):
         self.Freeze()
+        print self.contentPanel.GetSize()
         if self._toggle == 1:
             self.contentMinSize = self.contentPanel.GetSize()
-            self.contentPanel.SetMinSize(wx.Size(self.contentMinSize[0],0))
-            self.headerBmp.SetBitmap( self.bmpCollapsed)
-
-
+            self.contentPanel.Hide()
+            self.headerBmp.SetBitmap(self.bmpCollapsed)
         else:
-            self.contentPanel.SetMinSize(self.contentMinSize)
-
-            self.headerBmp.SetBitmap( self.bmpExpanded)
-
-
-        self._toggle *=-1
+            self.contentPanel.Show()
+            self.headerBmp.SetBitmap(self.bmpExpanded)
 
+        self._toggle *= -1
+        self.Layout()
         self.Thaw()
+
         if self.forceLayout == -1:
-            self.OnStateChange(self.GetBestSize())
+            if wx.VERSION >= (3, 0):
+                x, y = self.GetBestSize()
+                y -= self.contentPanel.GetSize()[1]
+            else:
+                x, y = self.GetBestSize()
+            self.OnStateChange((x, y))
         else:
-            self.parent.Layout()
+            self.parent.Layout()
\ No newline at end of file
diff --git a/gui/pygauge.py b/gui/pygauge.py
index f06a789..308004a 100644
--- a/gui/pygauge.py
+++ b/gui/pygauge.py
@@ -312,47 +312,53 @@ class PyGauge(wx.PyWindow):
             r = copy.copy(rect)
             r.width = w
 
+            if r.width > 0:
+                # If we draw it with zero width, GTK throws errors. This way,
+                # only draw it if the gauge will actually show something.
+                # We stick other calculations in this block to avoid wasting
+                # time on them if not needed. See GH issue #282
+
+                pv = value
+                xv=1
+                transition = 0
 
-            pv = value
-            xv=1
-            transition = 0
+                if pv <= 100:
+                    xv = pv/100
+                    transition = 0
 
-            if pv <= 100:
-                xv = pv/100
-                transition = 0
+                elif pv <=101:
+                    xv = pv -100
+                    transition = 1
 
-            elif pv <=101:
-                xv = pv -100
-                transition = 1
+                elif pv <= 103:
+                    xv = (pv -101)/2
+                    transition = 2
 
-            elif pv <= 103:
-                xv = (pv -101)/2
-                transition = 2
+                elif pv <= 105:
+                    xv = (pv -103)/2
+                    transition = 3
 
-            elif pv <= 105:
-                xv = (pv -103)/2
-                transition = 3
+                else:
+                    pv = 106
+                    xv = pv -100
+                    transition = -1
 
-            else:
-                pv = 106
-                xv = pv -100
-                transition = -1
+                if transition != -1:
+                    colorS,colorE = self.transitionsColors[transition]
+                    color = colorUtils.CalculateTransitionColor(colorS, colorE, xv)
+                else:
+                    color = wx.Colour(191,48,48)
 
-            if transition != -1:
-                colorS,colorE = self.transitionsColors[transition]
-                color = colorUtils.CalculateTransitionColor(colorS, colorE, xv)
-            else:
-                color = wx.Colour(191,48,48)
+                if self.gradientEffect > 0:
+                    gcolor = colorUtils.BrightenColor(color,  float(self.gradientEffect) / 100)
+                    gMid = colorUtils.BrightenColor(color,  float(self.gradientEffect/2) / 100)
+                else:
+                    gcolor = colorUtils.DarkenColor(color,  float(-self.gradientEffect) / 100)
+                    gMid = colorUtils.DarkenColor(color,  float(-self.gradientEffect/2) / 100)
 
-            if self.gradientEffect > 0:
-                gcolor = colorUtils.BrightenColor(color,  float(self.gradientEffect) / 100)
-                gMid = colorUtils.BrightenColor(color,  float(self.gradientEffect/2) / 100)
-            else:
-                gcolor = colorUtils.DarkenColor(color,  float(-self.gradientEffect) / 100)
-                gMid = colorUtils.DarkenColor(color,  float(-self.gradientEffect/2) / 100)
+                gBmp = drawUtils.DrawGradientBar(r.width, r.height, gMid, color, gcolor)
+                dc.DrawBitmap(gBmp, r.left, r.top)
 
-            gBmp = drawUtils.DrawGradientBar(r.width, r.height, gMid, color, gcolor)
-            dc.DrawBitmap(gBmp,r.left, r.top)
         else:
             colour=self.GetBarColour()
             dc.SetBrush(wx.Brush(colour))
@@ -397,7 +403,6 @@ class PyGauge(wx.PyWindow):
             dc.SetTextForeground(wx.Colour(255,255,255))
             dc.DrawLabel(formatStr.format(value), rect, wx.ALIGN_CENTER)
 
-
     def OnTimer(self,event):
         """
         Handles the ``wx.EVT_TIMER`` event for L{PyfaGauge}.
diff --git a/gui/resistsEditor.py b/gui/resistsEditor.py
index 8dcfe4b..acebfb1 100644
--- a/gui/resistsEditor.py
+++ b/gui/resistsEditor.py
@@ -51,10 +51,6 @@ class ResistsEditorDlg(wx.Dialog):
         self.namePicker.Bind(wx.EVT_TEXT_ENTER, self.processRename)
         self.namePicker.Hide()
 
-        self.btnSave = wx.Button(self, wx.ID_SAVE)
-        self.btnSave.Hide()
-        self.btnSave.Bind(wx.EVT_BUTTON, self.processRename)
-
         size = None
         headerSizer.Add(self.ccResists, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT | wx.LEFT, 3)
 
@@ -77,6 +73,12 @@ class ResistsEditorDlg(wx.Dialog):
                 btn.SetToolTipString("%s resist profile" % name.capitalize())
                 headerSizer.Add(btn, 0, wx.ALIGN_CENTER_VERTICAL)
 
+
+        self.btnSave = wx.Button(self, wx.ID_SAVE)
+        self.btnSave.Hide()
+        self.btnSave.Bind(wx.EVT_BUTTON, self.processRename)
+        headerSizer.Add(self.btnSave, 0, wx.ALIGN_CENTER)
+
         mainSizer.Add(headerSizer, 0, wx.EXPAND | wx.ALL, 2)
 
         self.sl = wx.StaticLine(self)
@@ -110,6 +112,9 @@ class ResistsEditorDlg(wx.Dialog):
             resistEditSizer.Add(wx.StaticText( self, wx.ID_ANY, u"%", wx.DefaultPosition, wx.DefaultSize, 0 ), 0, wx.BOTTOM | wx.TOP | wx.ALIGN_CENTER_VERTICAL, 5)
             editObj.Bind(wx.EVT_TEXT, self.ValuesUpdated)
 
+        # Color we use to reset invalid value color
+        self.colorReset = wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOWTEXT)
+
         contentSizer.Add(resistEditSizer, 1, wx.EXPAND | wx.ALL, 5)
         self.slfooter = wx.StaticLine(self)
         contentSizer.Add(self.slfooter, 0, wx.EXPAND | wx.TOP, 5)
@@ -196,21 +201,21 @@ class ResistsEditorDlg(wx.Dialog):
 
                 # if everything checks out, set resist attribute
                 setattr(p, "%sAmount"%type, value/100)
+                editObj.SetForegroundColour(self.colorReset)
 
+            self.stNotice.SetLabel("")
             self.totSizer.Layout()
 
             if event is not None:
-                # If we get here, everything is normal. Reset color
-                event.EventObject.SetForegroundColour(wx.NullColor)
                 event.Skip()
 
             service.TargetResists.getInstance().saveChanges(p)
 
         except ValueError:
-            event.EventObject.SetForegroundColour(wx.RED)
+            editObj.SetForegroundColour(wx.RED)
             self.stNotice.SetLabel("Incorrect Formatting (decimals only)")
         except AssertionError:
-            event.EventObject.SetForegroundColour(wx.RED)
+            editObj.SetForegroundColour(wx.RED)
             self.stNotice.SetLabel("Incorrect Range (must be 0-100)")
         finally:  # Refresh for color changes to take effect immediately
             self.Refresh()
@@ -266,7 +271,7 @@ class ResistsEditorDlg(wx.Dialog):
         for type in self.DAMAGE_TYPES:
             editObj = getattr(self, "%sEdit"%type)
             editObj.ChangeValue("0.0")
-            editObj.SetForegroundColour(wx.NullColor)
+            editObj.SetForegroundColour(self.colorReset)
 
         self.Refresh()
         self.renamePattern()
@@ -349,8 +354,6 @@ class ResistsEditorDlg(wx.Dialog):
             self.namePicker.SetFocus()
             for btn in (self.new, self.rename, self.delete, self.copy):
                 btn.Hide()
-                self.headerSizer.Remove(btn)
-            self.headerSizer.Add(self.btnSave, 0, wx.ALIGN_CENTER)
             self.btnSave.Show()
             self.restrict()
             self.headerSizer.Layout()
@@ -359,12 +362,10 @@ class ResistsEditorDlg(wx.Dialog):
             self.ccResists.Show()
             self.namePicker.Hide()
             self.btnSave.Hide()
-            self.headerSizer.Remove(self.btnSave)
             for btn in (self.new, self.rename, self.delete, self.copy):
-                self.headerSizer.Add(btn, 0, wx.ALIGN_CENTER_VERTICAL)
                 btn.Show()
             self.unrestrict()
-            #self.headerSizer.Layout()
+            self.headerSizer.Layout()
 
 
     def __del__( self ):
diff --git a/gui/sfBrowserItem.py b/gui/sfBrowserItem.py
index 4067707..81294cb 100644
--- a/gui/sfBrowserItem.py
+++ b/gui/sfBrowserItem.py
@@ -325,7 +325,8 @@ class SFBrowserItem(wx.Window):
 
 
     def OnLeftDown(self, event):
-        self.CaptureMouse()
+        if not self.HasCapture():
+            self.CaptureMouse()
 
         btn = self.toolbar.MouseClick(event)
 
diff --git a/gui/shipBrowser.py b/gui/shipBrowser.py
index 5301c6f..c5d81c3 100644
--- a/gui/shipBrowser.py
+++ b/gui/shipBrowser.py
@@ -15,6 +15,7 @@ import gui.utils.animEffects as animEffects
 
 import gui.sfBrowserItem as SFItem
 from gui.contextMenu import ContextMenu
+import gui.utils.fonts as fonts
 
 import service
 import gui.utils.fonts as fonts
@@ -1340,7 +1341,7 @@ class ShipItem(SFItem.SFBrowserItem):
             editCtl.SetPosition((fnEditPosX,fnEditPosY))
 
 class PFBitmapFrame(wx.Frame):
-    def __init__ (self,parent, pos, bitmap):
+    def __init__ (self, parent, pos, bitmap):
         wx.Frame.__init__(self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = pos, size = wx.DefaultSize, style =
                                                                wx.NO_BORDER
                                                              | wx.FRAME_NO_TASKBAR
@@ -1708,7 +1709,8 @@ class FitItem(SFItem.SFBrowserItem):
         if self.dragging:
             if not self.dragged:
                 if self.dragMotionTrigger < 0:
-                    self.CaptureMouse()
+                    if not self.HasCapture():
+                        self.CaptureMouse()
                     self.dragWindow = PFBitmapFrame(self, pos, self.dragTLFBmp)
                     self.dragWindow.Show()
                     self.dragged = True
@@ -1808,7 +1810,7 @@ class FitItem(SFItem.SFBrowserItem):
             self.AdjustControlSizePos(self.tcFitName, self.textStartx, self.toolbarx - self.editWidth - self.padding)
 
         tdc = wx.MemoryDC()
-        self.dragTLFBmp = wx.EmptyBitmap((self.toolbarx if self.toolbarx < 200 else 200), rect.height)
+        self.dragTLFBmp = wx.EmptyBitmap((self.toolbarx if self.toolbarx < 200 else 200), rect.height, 24)
         tdc.SelectObject(self.dragTLFBmp)
         tdc.Blit(0, 0, (self.toolbarx if self.toolbarx < 200 else 200), rect.height, mdc, 0, 0, wx.COPY)
         tdc.SelectObject(wx.NullBitmap)
diff --git a/gui/utils/drawUtils.py b/gui/utils/drawUtils.py
index 77b260a..dabd051 100644
--- a/gui/utils/drawUtils.py
+++ b/gui/utils/drawUtils.py
@@ -33,9 +33,10 @@ def DrawFilledBitmap(width, height, color):
     return canvas
 
 def DrawGradientBar(width, height, gStart, gEnd, gMid = None, fillRatio = 4):
+    # we need to have dimensions to draw
+    assert width > 0 and height > 0
     canvas = wx.EmptyBitmap(width,height)
 
-
     mdc = wx.MemoryDC()
     mdc.SelectObject(canvas)
 
diff --git a/gui/utils/exportHtml.py b/gui/utils/exportHtml.py
index 726bec2..838bae3 100644
--- a/gui/utils/exportHtml.py
+++ b/gui/utils/exportHtml.py
@@ -136,7 +136,7 @@ class exportHtmlThread(threading.Thread):
         categoryList = list(sMkt.getShipRoot())
         categoryList.sort(key=lambda ship: ship.name)
 
-        count = 1
+        count = 0
 
         for group in categoryList:
             # init market group string to give ships something to attach to
diff --git a/gui/utils/fonts.py b/gui/utils/fonts.py
index 08f858f..eb2dd95 100644
--- a/gui/utils/fonts.py
+++ b/gui/utils/fonts.py
@@ -1,3 +1,8 @@
+'''
+Font file to handle the differences in font calculations between
+different wxPython versions
+'''
+
 import wx
 
 if 'wxMac' in wx.PlatformInfo:
diff --git a/pyfa.py b/pyfa.py
index 76b7ca3..3e6b77e 100755
--- a/pyfa.py
+++ b/pyfa.py
@@ -20,6 +20,7 @@
 
 import sys
 import re
+import config
 
 if not hasattr(sys, 'frozen'):
 
@@ -30,18 +31,27 @@ if not hasattr(sys, 'frozen'):
     try:
         import wxversion
     except ImportError:
-        print("Cannot find wxPython\nYou can download wxPython (2.8) from http://www.wxpython.org/")
+        print("Cannot find wxPython\nYou can download wxPython (2.8+) from http://www.wxpython.org/")
         sys.exit(1)
+    
+    # if user wants to force 2.8, try that and go directly to ensureMinimal path if fails
     try:
-        wxversion.select('2.8')
+        if getattr(config.configforced, "force28", False):
+            wxversion.select('2.8')
+        else:
+            # try 3.0, then 2.8. If any exceptions, go to ensureMinimal path
+            try:
+                wxversion.select('3.0')
+            except:
+                wxversion.select('2.9')
     except wxversion.VersionError:
         try:
             wxversion.ensureMinimal('2.8')
         except wxversion.VersionError:
-            print("Installed wxPython version doesn't meet requirements.\nYou can download wxPython (2.8) from http://www.wxpython.org/")
+            print "Installed wxPython version doesn't meet requirements.\nYou can download wxPython (2.8+) from http://www.wxpython.org/"
             sys.exit(1)
         else:
-            print("wxPython 2.8 not found; attempting to use newer version, expect errors")
+            print "wxPython 2.8 not found; attempting to use newer version, expect errors"        
 
     try:
         import sqlalchemy
@@ -72,12 +82,15 @@ if __name__ == "__main__":
     parser.add_option("-r", "--root", action="store_true", dest="rootsavedata", help="if you want pyfa to store its data in root folder, use this option", default=False)
     (options, args) = parser.parse_args()
 
-    import config
     # Configure paths
     if options.rootsavedata is True:
         config.saveInRoot = True
     config.defPaths()
 
+    # Basic logging initialization
+    import logging
+    logging.basicConfig()
+
     # Import everything
     import wx
     import os
diff --git a/service/conversions/__init__.py b/service/conversions/__init__.py
index c452fb6..c9ee794 100644
--- a/service/conversions/__init__.py
+++ b/service/conversions/__init__.py
@@ -7,7 +7,7 @@ item's name. The name of the file is usually arbitrary unless it's used in logic
 elsewhere (in which case can be accessed with packs[name])
 """
 
-import os
+import pkgutil
 
 # init parent dict
 all = {}
@@ -15,10 +15,10 @@ all = {}
 # init container to store the separate conversion packs in case we need them
 packs = {}
 
-for filename in os.listdir(os.path.dirname(__file__)):
-    basename, extension = filename.rsplit('.', 1)
 
-    if extension == "py" and basename not in ("__init__",):
-        conversionPack = __import__("%s.%s"%(__name__, basename), fromlist=True)
-        all.update(conversionPack.CONVERSIONS)
-        packs[basename] = conversionPack.CONVERSIONS
+prefix = __name__ + "."
+for importer, modname, ispkg in pkgutil.iter_modules(__path__, prefix):
+    conversionPack = __import__(modname, fromlist="dummy")
+    all.update(conversionPack.CONVERSIONS)
+    modname_tail = modname.rsplit('.', 1)[-1]
+    packs[modname_tail] = conversionPack.CONVERSIONS
--- /dev/null
+++ b/setup.py
@@ -0,0 +1,79 @@
+"""
+Distribution builder for pyfa.
+
+Windows executable: python setup.py build
+Windows executable + installer: python setup.py bdist_msi
+"""
+
+import sys
+
+from cx_Freeze import setup, Executable
+
+import config
+
+
+app_name = 'pyfa'
+app_version = '{}'.format(config.version)
+app_description = 'Python fitting assistant'
+
+
+packages = ['eos', 'gui', 'service', 'utils']
+include_files = ['icons', 'staticdata', 'gpl.txt']
+includes = []
+excludes = ['Tkinter']
+
+
+# Windows-specific options
+build_options_winexe = {
+    'packages': packages,
+    'include_files': include_files,
+    'includes': includes,
+    'excludes': excludes,
+    'compressed': True,
+    'optimize': 2,
+    'include_msvcr': True,
+}
+
+build_options_winmsi = {
+    'upgrade_code': '{E80885AC-31BA-4D9A-A04F-9E5915608A6C}',
+    'add_to_path': False,
+    'initial_target_dir': r'[ProgramFilesFolder]\{}'.format(app_name),
+}
+
+
+# Mac-specific options (untested)
+build_options_macapp = {
+    'iconfile': 'dist_assets/mac/pyfa.icns',
+    'bundle_name': app_name,
+}
+
+build_options_macdmg = {
+    'volume_label': app_name,
+    'applications-shortcut': True,
+}
+
+
+# Generic executable options
+executable_options = {
+    'script': 'pyfa.py',
+    # Following are windows-specific options, they are stored
+    # on a per-executable basis
+    'base': 'Win32GUI' if sys.platform=='win32' else None,
+    'icon': 'dist_assets/win/pyfa.ico',
+    'shortcutDir': 'DesktopFolder',
+    'shortcutName': app_name,
+}
+
+
+setup(
+    name=app_name,
+    version=app_version,
+    description=app_description,
+    options = {
+        'build_exe': build_options_winexe,
+        'bdist_msi': build_options_winmsi,
+        'bdist_mac': build_options_macapp,
+        'bdist_dmg': build_options_macdmg,
+    },
+    executables=[Executable(**executable_options)]
+)
diff --git a/staticdata/README.txt b/staticdata/README.txt
deleted file mode 100644
index 81f4f77..0000000
--- a/staticdata/README.txt
+++ /dev/null
@@ -1,25 +0,0 @@
-Generating a new sqlite dump HOWTO
-
-You'll need pyfa itself (git://dev.evefit.org/pyfa.git)
-as well as phobos (git://dev.evefit.org/phobos.git)
-
-Phobos can dump the whole of the eve cache to json, after installing it (=python setup.py install) just do python dumpToJson.py -e /path/to/eve -c /path/to/eve/cache -s serverName -o /output/folder
-
-Arguments explained: -e and -c should be pretty self explanitory, they're the path to the eve install and the eve cache respectivly
-
--s is the serverName, its used to figure out which subfolder in the machonet folder we're intrested in. (possible values: tranquility, singularity, duality).
-This is passed directly to reverence which keeps a serverName to IP address mapping. You could probably add more servers with their IPs in the reverence sourcecode (cache.py file, around like 150 in the CacheMgr class) if you need another one.
-
--o is the output folder to dump all json files to, it should already exist or you'll get errors.
-
-
-
-After thats done, you'll have all json files you need, and you can use a script within pyfa to generate a dump from that.
-
-After you checked out pyfa, don't forget to update submodules (git submodule update --init).
-
-and then browse to eos/utils/scripts/jsonToSql.py, which can generate the sqlite dump pyfa needs.
-
-python jsonToSql.py -d eve.db -j /output/folder
-
-Once thats done, you should have a nice little sqlite database, you can replace the one in the staticdata folder with yours and it should run right away.
\ No newline at end of file
